name: CI - Build and Test

on:
  push:
    branches: [ "master" ]

jobs:
  build:
    name: Build with Maven
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: Build app (skip tests)
        run: mvn clean package -DskipTests

  test:
    name: Run Tests with Report
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: Run tests and generate coverage
        run: mvn verify -Dspring.profiles.active=test

      - name: Upload Test Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: junit-test-results
          path: target/surefire-reports/

      - name: Upload Jacoco Coverage Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: jacoco-report
          path: target/site/jacoco/

  deploy:
    name: Deploy via SSH
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Deploy to Remote Server via SSH
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: 45.91.92.178
          username: jakov
          key: ${{ secrets.SSH_PRIVATE_KEY_COGIFY_SERVER }}
          script: |
            set -e
            echo "‚û° Pulling latest code"
            cd /home/jakov/app  # üìå Update to actual project folder on the server
            if [ ! -d "app/.git" ]; then
              echo "üì• Cloning repository"
              git clone git@github.com:Jakov992/poll.git app
              cd app
            else
              echo "üîÑ Pulling latest changes"
              cd app
              git pull origin master
            fi

            echo "üê≥ Building and running with Docker Compose"
            docker compose down --remove-orphans
            docker compose build
            docker compose up -d

            echo "‚úÖ Deployed successfully!"