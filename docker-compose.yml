version: '3.9'

services:

  mysql:
    image: mysql:8
    container_name: mysql
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: secret
      MYSQL_DATABASE: polls_db
    ports:
      - "3307:3306"
    volumes:
      - mysql-data:/var/lib/mysql
      - ./bootstrap/initdb.d:/docker-entrypoint-initdb.d
    healthcheck:
      test: [ "CMD", "mysqladmin", "ping", "-h", "localhost", "-psecret" ]
      interval: 10s
      timeout: 5s
      retries: 5


  keycloak:
    image: poll-keycloak-image
    container_name: poll-keycloak
    restart: unless-stopped
    depends_on:
      mysql:
        condition: service_healthy
    ports:
      - "8090:8090"
    command: [ 'start-dev', '--http-port=8090', "--import-realm" ]
    environment:
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
      KC_PROXY_HEADERS: xforwarded
      KC_HOSTNAME_STRICT: false
      KC_HOSTNAME_STRICT_HTTPS: true
      KC_DB: mysql
      KC_DB_URL_HOST: mysql
      KC_DB_URL_DATABASE: keycloak
      KC_DB_USERNAME: root
      KC_DB_PASSWORD: secret
      KC_DB_SCHEMA: keycloak
      KC_HOSTNAME_PORT: 443
      KC_HOSTNAME_URL: https://kk.jakovkusic.dev/
      KC_HOSTNAME_ADMIN_URL: https://kk.jakovkusic.dev/
    build:
      context: .
      dockerfile: dockerfiles/keycloak/Dockerfile
    volumes:
      - ./bootstrap/keycloak:/opt/keycloak/data/import:ro


  app:
    build:
      context: .
      dockerfile: dockerfiles/app/Dockerfile
    container_name: poll-app
    restart: unless-stopped
    depends_on:
      mysql:
        condition: service_healthy
    ports:
      - "8080:8080"
    environment:
      SPRING_DATASOURCE_URL: jdbc:mysql://mysql:3306/polls_db?useSSL=false&allowPublicKeyRetrieval=true&serverTimezone=UTC
      SPRING_DATASOURCE_USERNAME: root
      SPRING_DATASOURCE_PASSWORD: secret
      SPRING_JPA_HIBERNATE_DDL_AUTO: update
      SPRING_JPA_SHOW_SQL: "true"
      SPRING_JPA_PROPERTIES_HIBERNATE_DIALECT: org.hibernate.dialect.MySQL8Dialect

  react-app:
    container_name: poll-react
    build:
      context: .
      dockerfile: dockerfiles/frontend/Dockerfile
    ports:
      - "3000:80"
    environment:
      - NODE_ENV=production

volumes:
  mysql-data:
